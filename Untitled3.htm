<!DOCTYPE html>
<html lang="th">
<head>
<meta charset="UTF-8" />
<title>โปรแกรมหาขนาดเซตจากนิพจน์</title>
<link href="./css/style.css" rel="stylesheet" />
<style>
    body { font-family: "Sarabun", sans-serif; max-width: 700px; margin: 20px auto; padding: 0 10px; }
    input[type=number] { width: 60px; margin: 5px 10px 5px 2px; }
    label { display: inline-block; margin-bottom: 5px; }
    button { margin: 2px; padding: 5px 12px; font-size: 18px; cursor: pointer; }
    #question { font-size: 20px; margin: 10px 0; min-height: 30px; border: 1px solid #ccc; padding: 8px; background: #f9f9f9; }
    #result { margin-top: 20px; font-weight: bold; font-size: 22px; color: darkgreen; }
    .btn-input { font-size: 20px; }
    .inputs-container { margin-bottom: 15px; }
</style>
</head>
<body>

<h2>โปรแกรมหาขนาดเซตจากนิพจน์</h2>

<div class="inputs-container">
    <p>กรอกจำนวนสมาชิกของแต่ละเซต (จำนวนเต็ม ≥ 0):</p>
    <label>U: <input type="number" id="nU" min="0" placeholder="0"></label>
    <label>A: <input type="number" id="nA" min="0" placeholder="0"></label>
    <label>B: <input type="number" id="nB" min="0" placeholder="0"></label>
    <label>C: <input type="number" id="nC" min="0" placeholder="0"></label><br>
    <label>A ∩ B: <input type="number" id="nAB" min="0" placeholder="0"></label>
    <label>A ∩ C: <input type="number" id="nAC" min="0" placeholder="0"></label>
    <label>B ∩ C: <input type="number" id="nBC" min="0" placeholder="0"></label>
    <label>A ∩ B ∩ C: <input type="number" id="nABC" min="0" placeholder="0"></label>
</div>

<h3>สร้างนิพจน์ของคุณ</h3>
<div id="question" aria-label="พื้นที่แสดงนิพจน์ที่สร้าง"></div>

<div>
    <button class="btn-input" onclick="appendToQuestion('A')">A</button>
    <button class="btn-input" onclick="appendToQuestion('B')">B</button>
    <button class="btn-input" onclick="appendToQuestion('C')">C</button>
    <button class="btn-input" onclick="appendToQuestion('U')">U</button>
    <button class="btn-input" onclick="appendToQuestion('(')">(</button>
    <button class="btn-input" onclick="appendToQuestion(')')">)</button>
    <button class="btn-input" onclick="appendToQuestion('∪')">∪</button>
    <button class="btn-input" onclick="appendToQuestion('∩')">∩</button>
    <button class="btn-input" onclick="appendToQuestion('-')">-</button>
    <button class="btn-input" onclick="appendToQuestion('\'')">’</button>
    <button class="btn-input" onclick="clearQuestion()">ล้าง</button>
</div>

<button onclick="calculate()">คำนวณ</button>

<div id="result"></div>

<script>
let question = '';

function appendToQuestion(ch) {
    question += ch;
    document.getElementById('question').textContent = question;
}

function clearQuestion() {
    question = '';
    document.getElementById('question').textContent = '';
    document.getElementById('result').textContent = '';
}

// อ่านค่าจาก input (ถ้าว่างหรือไม่ใช่ตัวเลขถือเป็น 0)
function readInputs() {
    function getVal(id) {
        let v = parseInt(document.getElementById(id).value);
        return isNaN(v) || v < 0 ? 0 : v;
    }
    return {
        nU: getVal('nU'),
        nA: getVal('nA'),
        nB: getVal('nB'),
        nC: getVal('nC'),
        nAB: getVal('nAB'),
        nAC: getVal('nAC'),
        nBC: getVal('nBC'),
        nABC: getVal('nABC')
    };
}

// Parser ตัวเดิม (รองรับ ∪, ∩, -, ’, วงเล็บ, ตัวแปร A B C U)
let pos = 0;
let expr = '';

function skipSpaces() {
    while (pos < expr.length && expr[pos] === ' ') pos++;
}

function parseExpression() {
    let node = parseTerm();
    skipSpaces();
    while (pos < expr.length && (expr[pos] === '∪' || expr[pos] === '-')) {
        let op = expr[pos++];
        let right = parseTerm();
        node = {type:'op', op: op, left: node, right: right};
        skipSpaces();
    }
    return node;
}

function parseTerm() {
    let node = parseFactor();
    skipSpaces();
    while (pos < expr.length && expr[pos] === '∩') {
        pos++;
        let right = parseFactor();
        node = {type:'op', op:'∩', left: node, right: right};
        skipSpaces();
    }
    return node;
}

function parseFactor() {
    skipSpaces();
    if (pos >= expr.length) throw new Error("สิ้นสุดนิพจน์ก่อนเวลา");

    let c = expr[pos];

    if (c === '(') {
        pos++;
        let node = parseExpression();
        skipSpaces();
        if (expr[pos] !== ')') throw new Error("ไม่มีวงเล็บปิด");
        pos++;
        if (expr[pos] === '\'') {
            pos++;
            node = {type:'complement', expr: node};
        }
        return node;
    }

    if ('ABCU'.includes(c)) {
        pos++;
        let node = {type:'var', value: c};
        if (expr[pos] === '\'') {
            pos++;
            node = {type:'complement', expr: node};
        }
        return node;
    }

    throw new Error(`พบตัวอักษรไม่รู้จัก '${c}' ที่ตำแหน่ง ${pos+1}`);
}

// ฟังก์ชันช่วย intersection
function getIntersection(sets, names) {
    let sorted = names.split('').sort().join('');
    switch(sorted) {
        case 'AB': return sets.nAB;
        case 'AC': return sets.nAC;
        case 'BC': return sets.nBC;
        case 'ABC': return sets.nABC;
        default: return 0;
    }
}

// คำนวณค่าจาก AST
function evaluate(node, sets) {
    if (!node) return 0;
    switch (node.type) {
        case 'var':
            return sets['n' + node.value] || 0;
        case 'complement':
            return sets.nU - evaluate(node.expr, sets);
        case 'op':
            let L = evaluate(node.left, sets);
            let R = evaluate(node.right, sets);

            if (node.op === '∪') {
                // union แบบ 2 ตัวแปรตรงๆ
                if (node.left.type === 'var' && node.right.type === 'var') {
                    return L + R - getIntersection(sets, node.left.value + node.right.value);
                }
                // union แบบ (A ∪ B) ∪ C รองรับ union 3 ตัวแปร
                if (node.left.type === 'op' && node.left.op === '∪' && node.right.type === 'var') {
                    let Aname = node.left.left.type === 'var' ? node.left.left.value : null;
                    let Bname = node.left.right.type === 'var' ? node.left.right.value : null;
                    let Cname = node.right.value;
                    if (!Aname || !Bname || !Cname) throw new Error("รองรับ union 3 เซตที่เป็นตัวแปรตรงๆ เท่านั้น");

                    let nA = sets['n' + Aname];
                    let nB = sets['n' + Bname];
                    let nC = sets['n' + Cname];
                    let nAB = getIntersection(sets, Aname + Bname);
                    let nAC = getIntersection(sets, Aname + Cname);
                    let nBC = getIntersection(sets, Bname + Cname);
                    let nABC = getIntersection(sets, 'ABC');

                    return nA + nB + nC - nAB - nAC - nBC + nABC;
                }
                throw new Error("รองรับ union ซับซ้อนได้แค่ 2-3 เซตตรงๆ");
            }

            if (node.op === '∩') {
                if (node.left.type === 'var' && node.right.type === 'var') {
                    return getIntersection(sets, node.left.value + node.right.value);
                }
                throw new Error("รองรับ intersection เฉพาะระหว่างตัวแปรสองตัว");
            }

            if (node.op === '-') {
                if (node.left.type === 'var' && node.right.type === 'var') {
                    let inter = getIntersection(sets, node.left.value + node.right.value);
                    return L - inter;
                }
                throw new Error("รองรับการลบเซตเฉพาะระหว่างตัวแปรสองตัว");
            }

            throw new Error("ไม่รองรับการดำเนินการนี้");
    }
}

function calculate() {
    document.getElementById('result').textContent = '';
    expr = question;
    pos = 0;
    try {
        if (!expr.trim()) {
            throw new Error("กรุณาสร้างนิพจน์ก่อนคำนวณ");
        }
        const ast = parseExpression();
        if (pos !== expr.length) throw new Error("นิพจน์ยังไม่จบ แต่มีตัวอักษรเกิน");
        const sets = readInputs();

        // ตรวจสอบเงื่อนไขจำนวนสมาชิกไม่เกิน U
        if (sets.nA > sets.nU || sets.nB > sets.nU || sets.nC > sets.nU) {
            throw new Error("จำนวนสมาชิกของ A, B หรือ C ต้องไม่เกิน U");
        }
        if (sets.nAB > Math.min(sets.nA, sets.nB)) {
            throw new Error("จำนวนสมาชิกของ A∩B ต้องไม่เกินจำนวนสมาชิก A และ B");
        }
        if (sets.nAC > Math.min(sets.nA, sets.nC)) {
            throw new Error("จำนวนสมาชิกของ A∩C ต้องไม่เกินจำนวนสมาชิก A และ C");
        }
        if (sets.nBC > Math.min(sets.nB, sets.nC)) {
            throw new Error("จำนวนสมาชิกของ B∩C ต้องไม่เกินจำนวนสมาชิก B และ C");
        }
        if (sets.nABC > Math.min(sets.nAB, sets.nAC, sets.nBC)) {
            throw new Error("จำนวนสมาชิกของ A∩B∩C ต้องไม่เกินจำนวนสมาชิกของ A∩B, A∩C และ B∩C");
        }

        let answer = evaluate(ast, sets);
        if (answer < 0) answer = 0;

        document.getElementById('result').textContent = 'ขนาดเซต = ' + answer;
    } catch(e) {
        document.getElementById('result').textContent = 'ผิดพลาด: ' + e.message;
    }
}

<script src="./js/script.js"></script>

</body>
</html>
